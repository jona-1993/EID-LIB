<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EID-Lib</name>
    </assembly>
    <members>
        <member name="T:EIDLib.Integrity">
            Example Integrity checking class
            Some examples on how to verify certificates and signatures
        </member>
        <member name="M:EIDLib.Integrity.Verify(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Verify a signature with a given certificate. It is assumed that
            the signature is made from a SHA1 hash of the data.
            </summary>
            <param name="data">Signed data</param>
            <param name="signature">Signature to be verified</param>
            <param name="certificate">Certificate containing the public key used to verify the code</param>
            <returns>True if the verification succeeds</returns>
        </member>
        <member name="M:EIDLib.Integrity.VerifyChallenge(System.Byte[],System.Byte[],Net.Sf.Pkcs11.Objects.ECPublicKey)">
            <summary>
            Verify a card challenge against the card's public key. It is assumed that
            the signature is an EC signature (curve Secp384r1) from a SHA384 hash of the data.
            </summary>
            <param name="data">challenge</param>
            <param name="signature">Signature of the challenge</param>
            <param name="eCPublicKey">ECPublicKey object to verify the signed challenge</param>
            <returns>True if the verification succeeds</returns>
        </member>
        <member name="M:EIDLib.Integrity.CheckCertificateChain(System.Collections.Generic.List{System.Byte[]},System.Byte[])">
            <summary>
            Check a certificate chain. In order to trust the certficate, the root certificate must be
            stored in the trusted root certificates store. An online CRL check of the chain will be carried out.
            </summary>
            <param name="CACertificates">CA certificates</param>
            <param name="leafCertificate">The certificate whose chain will be checked</param>
            <returns>True if the certificate is trusted according to the system settings</returns>
        </member>
        <member name="E:EIDLib.ReadData.Detect">
            <summary>
            Detect if identity card is plugged or no
            </summary>
        </member>
        <member name="M:EIDLib.ReadData.#ctor">
            <summary>
            Default constructor. Will instantiate the beidpkcs11.dll pkcs11 module
            </summary>
        </member>
        <member name="M:EIDLib.ReadData.#ctor(System.String)">
            <summary>
            Name of native library (beidpkcs11)
            </summary>
            <param name="moduleFileName"></param>
        </member>
        <member name="M:EIDLib.ReadData.GetSlotDescription">
            <summary>
            Gets the description of the first slot (cardreader) found
            </summary>
            <returns>Description of the first slot found</returns>
        </member>
        <member name="M:EIDLib.ReadData.CreateSession(Net.Sf.Pkcs11.Slot)">
            <summary>
            Tries to create a Session, returns NULL in case of failure
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetTokenInfoLabel">
            <summary>
            Gets label of token found in the first non-empty slot (cardreader)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCardNumber">
            <summary>
            Get card number of the owner of the token (eid) in the first non-empty slot [HEX] (cardreader)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetChipNumber">
            <summary>
            Get chip number of the owner of the token (eid) in the first non-empty slot (cardreader)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetValidityBeginDate">
            <summary>
            Get validity begin date of the owner of the token (eid) in the first non-empty slot (cardreader)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetValidityEndDate">
            <summary>
            Get validity end date of the owner of the token (eid) in the first non-empty slot (cardreader)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetIssuingMunicipality">
            <summary>
            Get issuing municipality of the owner of the token (eid) in the first non-empty slot (cardreader)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetNationalNumber">
            <summary>
            Get national number of the owner of the token (eid) in the first non-empty slot (cardreader)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetSurname">
            <summary>
            Get surname of the owner of the token (eid) in the first non-empty slot (cardreader)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetFirstnames">
            <summary>
            Get firstnames of the owner of the token (eid) in the first non-empty slot (cardreader)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetFirstLetterOfThirdGivenName">
            <summary>
            Get first letter of third given name of the owner of the token (eid) in the first non-empty slot (cardreader)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetNationality">
            <summary>
            Get nationality of the owner of the token (eid) in the first non-empty slot (cardreader)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetLocationOfBirth">
            <summary>
            Get location of birth of the owner. This is a language specific string
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetDateOfBirth">
            <summary>
            Get date of birth of the owner. This is a language specific string
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetGender">
            <summary>
            Get gender of the owner. (M/F/V/W) This is a language specific string
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetNobility">
            <summary>
            Get nobility of the owner. (Noble condition) This is a language specific string
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetDocumentType">
            <summary>
            Get document type of the owner. This is a language specific string
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetSpecialStatus">
            <summary>
            Get special status of the owner. This is a language specific string
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetPhotoHash">
            <summary>
            Get hash of the photo file of the owner. This is a language specific string [HEX (SHA-384)]
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetDuplicata">
            <summary>
            Get duplicata of the owner. This is a language specific string
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetSpecialOrganization">
            <summary>
            Get special organization of the owner. (1: SHAPE, 2: NATO) This is a language specific string
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetMemberOfFamily">
            <summary>
            Get member of family of the owner. (bool) This is a language specific string
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetDateAndCountryOfProtection">
            <summary>
            Get date and country of protection of the owner. This is a language specific string
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetWorkPermitMention">
            <summary>
            Get work permit mention of the owner. This is a language specific string
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetEmployerVat1">
            <summary>
            Get employer vat 1 of the owner. This is a language specific string
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetEmployerVat2">
            <summary>
            Get employer vat 2 of the owner. This is a language specific string
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetRegionalFileNumber">
            <summary>
            Get regional file number of the owner. This is a language specific string
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetBasicKeyHash">
            <summary>
            Get basic key hash of the owner. SHA384 hash of the public basic key. (applet 1.8+) This is a language specific string
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetBrexitMention1">
            <summary>
            Get brexit mention 1 of the owner. This is a language specific string
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetBrexitMention2">
            <summary>
            Get brexit mention 2 of the owner. This is a language specific string
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetAddressStreetAndNumber">
            <summary>
            Get streetname and number of the owner. This is a language specific string
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetAddressZip">
            <summary>
            Get address zip of the owner. This is a language specific string
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetAddressMunicipality">
            <summary>
            Get address municipality of the owner. This is a language specific string
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCardSerialNumber">
            <summary>
            Get card serial number (HEX)
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCardCompCode">
            <summary>
            Get card comp code (HEX)
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCardOSNumber">
            <summary>
            Get card OS number (HEX)
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCardOSVersion">
            <summary>
            Get card OS version (HEX)
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCardSoftMaskNumber">
            <summary>
            Get soft mask number (HEX)
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCardSoftMaskVersion">
            <summary>
            Get soft mask version (HEX)
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCardAppletVersion">
            <summary>
            Get card applet version [Applet +1.7] (HEX)
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCardGlobOSVersion">
            <summary>
            Get glob OS version [Applet +1.7] (HEX)
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCardAppletIntVersion">
            <summary>
            Get card applet int version (HEX)
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCardPKCS1Support">
            <summary>
            Get PKCS1 Support [Applet +1.7] (HEX)
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCardAppletLifeCycle">
            <summary>
            Get applet life cycle [Applet +1.7] (HEX)
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCardPKCS15Version">
            <summary>
            Get PKCS1 Support [Applet +1.7] (HEX)
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCardKeyExchangeVersion">
            <summary>
            Get key exchange version (HEX)
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCardSignature">
            <summary>
            Get Signature (not yet available) (HEX)
            More info about the format can be found in the eid specs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetData(System.String)">
            <summary>
            Generic function to get string data objects from label
            </summary>
            <param name="label">Value of label attribute of the object</param>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetIdFile">
            <summary>
            Return ID data file contents
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetAddressFile">
            <summary>
            Return Address file contents
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetPhotoFile">
            <summary>
            Return Photo file contents
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetIdSignatureFile">
            <summary>
            Return ID file signature
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetAddressSignatureFile">
            <summary>
            Return Address file signature
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCertificateRNFile">
            <summary>
            Return RRN Certificate. This certificate is used to validate
            the file signatures
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetFile(System.String)">
            <summary>
            Return raw byte data from objects
            </summary>
            <param name="Filename">Label value of the object</param>
            <returns>byte array with file</returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCertificateAuthenticationFile">
            <summary>
            Return the "authentication" leaf certificate file
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCertificateSignatureFile">
            <summary>
            Return the "signature" leaf certificate file
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCertificateCAFile">
            <summary>
            Return the Intermediate CA certificate file
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCertificateRootFile">
            <summary>
            Return the root certificate file
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCertificateFile(System.String)">
            <summary>
            Return raw byte data from objects of object class Certificate
            </summary>
            <param name="Certificatename">Label value of the certificate object</param>
            <returns>byte array with certificate file</returns>
        </member>
        <member name="M:EIDLib.ReadData.GetCertificateLabels">
            <summary>
            Returns a list of PKCS11 labels of the certificate on the card
            </summary>
            <returns>List of labels of certificate objects</returns>
        </member>
        <member name="M:EIDLib.ReadData.GetPublicKey(System.String)">
            <summary>
            Return raw byte data from objects of object class Public Key
            </summary>
            <param name="PubKeyName">Label value of the key object</param>
            <returns>ECPublicKey object of the public key found</returns>
        </member>
        <member name="M:EIDLib.Sign.#ctor">
            <summary>
            Default constructor. Will instantiate the beidpkcs11.dll pkcs11 module
            </summary>
        </member>
        <member name="M:EIDLib.Sign.DoSign(System.Byte[],System.String)">
            <summary>
            Sign data with a named private key
            </summary>
            <param name="data">Data to be signed</param>
            <param name="privatekeylabel">Label for private key. Can be "Signature" or "Authentication"</param>
            <returns>Signed data.</returns>
        </member>
        <member name="M:EIDLib.Sign.DoChallenge(System.Byte[])">
            <summary>
            Challenge an applet 1.8 card
            </summary>
            <param name="data">Data to be signed</param>
            <returns>Signed challenge data.</returns>
        </member>
        <member name="T:Net.Sf.Pkcs11.Info">
            <summary>
            Description of Info.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.KeyPair">
            <summary>
            Description of KeyPait.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Module">
            <summary>
            Wrapper around Pkcs11(Cryptoki) module (high-level).
            </summary>
        </member>
        <member name="P:Net.Sf.Pkcs11.Module.P11Module">
            <summary>
            Pkcs11Module property for low-level access
            </summary>
        </member>
        <member name="M:Net.Sf.Pkcs11.Module.#ctor(Net.Sf.Pkcs11.Wrapper.Pkcs11Module)">
            <summary>
            Constructor
            </summary>
            <param name="p11Module">Pkcs11Module core object</param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Module.GetInstance(System.String)">
            <summary>
            Creates an instance of Pkcs11Module
            </summary>
            <param name="moduleName">
            module to be loaded. it is the path of pkcs11 driver
            <example>
            <code>
            Pkcs11Module pm=Pkcs11Module.GetInstance("gclib.dll");
            </code>
            </example>
            </param>
            <returns></returns>				
        </member>
        <member name="M:Net.Sf.Pkcs11.Module.GetSlotList(System.Boolean)">
            <summary>
            Get an Array of Slots.
            </summary>
            <param name="onlyTokenPresent">true if you wish to get only slots with Token. false otherwise</param>
            <returns>the Slots</returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Module.WaitForSlotEvent(System.Boolean)">
            <summary>
            Waits for a slot event to occur.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.ByteArrayAttribute">
            <summary>
            Description of ByteArrayAttribute.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.Certificate">
            <summary>
            Description of Certificate.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.CertificateTypeAttribute">
            <summary>
            Description of CertificateTypeAttribute.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.CharArrayAttribute">
            <summary>
            Description of CharArrayAttribute.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.DateAttribute">
            <summary>
            Description of DateAttribute.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.DomainParameters">
            <summary>
            Attribute - Data type - Meaning
            CKA_PRIME1,4 Big integer Prime p (512 to 1024 bits, in steps of 64 bits)
            CKA_SUBPRIME1,4 Big integer Subprime q (160 bits)
            CKA_BASE1,4 Big integer Base g
            CKA_PRIME_BITS2,3 CK_ULONG Length of the prime value.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.ECPrivateKey">
            <summary>
            Description of ECPrivateKey.
            </summary>
            
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.ECPublicKey">
            <summary>
            Description of ECPublicKey.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.GostPrivateKey">
            <summary>
            Description of GostPrivateKey.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Objects.GostPrivateKey.params_">
            <summary>
            Params.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.GostPublicKey">
            <summary>
            Description of GostPublicKey.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Objects.GostPublicKey.params_">
            <summary>
            Params.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.Key">
            <summary>
            Description of Key.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.KeyTypeAttribute">
            <summary>
            Description of KeyTypeAttribute.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.Mechanism">
            <summary>
            Description of Mechanism.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.MechanismTypeAttribute">
            <summary>
            Description of MechanismTypeAttribute.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.ObjectClassAttribute">
            <summary>
            Description of ObjectClassAttribute.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.P11Object">
            <summary>
            Description of PKCS11Object.
            </summary>
        </member>
        <member name="P:Net.Sf.Pkcs11.Objects.P11Object.HObj">
            <summary>
            Handle of and object (read-only).
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.PrivateKey">
            <summary>
            Description of PrivateKey.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.PublicKey">
            <summary>
            Description of PublicKey.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.RSAPrivateKey">
            <summary>
            Description of RSAPrivateKey.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.RSAPublicKey">
            <summary>
            Description of RSAPublicKey.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.SecretKey">
            <summary>
            Description of SecretKey.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.Storage">
            <summary>
            Description of Storage.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.X509AttributeCertificate">
            <summary>
            Description of X509AttributeCertificate.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Objects.X509PublicKeyCertificate">
            <summary>
            Description of X509PublicKeyCertificate.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.P11Util">
            <summary>
            Description of P11Util.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Params.Parameters">
            <summary>
            Description of custom Parameters.
            </summary>
        </member>
        <member name="M:Net.Sf.Pkcs11.Params.Parameters.ApplyToMechanism(Net.Sf.Pkcs11.Wrapper.CK_MECHANISM)">
            <summary>
            Fill CK_MECHANISM according to values of Parameters.
            Default implementation fills everything with zeros.
            </summary>
            <param name="ckMechanism"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Params.Parameters.GetParameters(Net.Sf.Pkcs11.Wrapper.CKM)">
            <summary>
            Obtain a parameter class here.
            </summary>
            <param name="ckm"></param>
            <returns></returns>
        </member>
        <member name="T:Net.Sf.Pkcs11.Session">
            <summary>
            Represents an open Session with a Token.
            </summary>
        </member>
        <member name="P:Net.Sf.Pkcs11.Session.Token">
            <summary>
            Session's Token
            </summary>
        </member>
        <member name="P:Net.Sf.Pkcs11.Session.Module">
            <summary>
            Session's Cryptoki Module
            </summary>
        </member>
        <member name="P:Net.Sf.Pkcs11.Session.HSession">
            <summary>
            Session Handle / id
            </summary>
        </member>
        <member name="M:Net.Sf.Pkcs11.Session.#ctor(Net.Sf.Pkcs11.Token,System.UInt64)">
            <summary>
            Constructor
            </summary>
            <param name="token">Session's Token</param>
            <param name="hSession">Session Handle / Id</param>
        </member>
        <member name="T:Net.Sf.Pkcs11.Slot">
            <summary>
            Description of Slot.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.SlotInfo">
            <summary>
            Description of SlotInfo.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Token">
            <summary>
            Description of Token.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.TokenException">
            <summary>
            Description of TokenException.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.TokenInfo">
            <summary>
            Description of TokenInfo.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Version">
            <summary>
            Description of Version.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Wrapper.CKK">
            <summary>
            Description of CKK.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.CKM.GOSTR3410">
            <summary>
            Механизм для генерации и проверки ЭЦП с использованием в качестве входа
            ранее вычисленного значения хэш-функции (32 байта ровно).
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.CKM.GOSTR3410_KEY_PAIR_GEN">
            <summary>
            Механизм для генерации ключевой пары.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.CKM.GOSTR3410_WITH_GOSTR3411">
            <summary>
            Механизм для генерации и проверки ЭЦП с хэшированием подаваемых на вход данных.
            Размер входных данных не ограничен.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.CKM.GOSTR3410_DERIVE">
            <summary>
            Механизм для выработки ключа согласования.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.CKM.GOSTR3411">
            <summary>
            Механизм вычисления хэш-функции.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.CKM.GOST28147">
            <summary>
            Механизм шифрования данных.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.CKM.GOST28147_ECB">
            <summary>
            Механизм шифрования данных с использованием метода простой замены.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.CKM.GOST28147_KEY_WRAP">
            <summary>
            Механизм экспорта и импорта открытых ключей.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.CKM.GOST28147_KEY_GEN">
            <summary>
            Механизм выработки симметричных ключей.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.CKM.GOSTR3410_KEY_PAIR_GEN_EX">
            <summary>
            Механизм для генерации ключевой пары согласно стандарту ГОСТ Р 34.10-2001.
            (From Etoken documentation, см. п.5.2. Параметры цифровой подписи).
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Wrapper.CKR">
            <summary>
            Description of CKR.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Wrapper.CK_FUNCTION_LIST">
            <summary>
            Converted to class because it can be inherited.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Wrapper.DelegateUtil">
            <summary>
            Description of DelegateUtil.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Wrapper.KernelUtilUNIX">
            <summary>
            Description of LibraryManager.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Wrapper.KernelUtilWindows">
            <summary>
            Description of LibraryManager.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Wrapper.KeyPairHandler">
            <summary>
            Description of KeyPair.
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Wrapper.PKCS11Constants">
            <summary>
            PKCS11Constants.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.PKCS11Constants.CKA_GOST3410PARAMS_EX">
            <summary>
            Набор эталонных параметров из RFC 4357,
            используемых в алгоритме формирования ключевой пары,
            описанном в ГОСТ 34.10-2001.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.PKCS11Constants.CKM_GOSTR3410">
            <summary>
            Механизм для генерации и проверки ЭЦП с использованием в качестве входа
            ранее вычисленного значения хэш-функции (32 байта ровно).
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.PKCS11Constants.CKM_GOSTR3410_KEY_PAIR_GEN">
            <summary>
            Механизм для генерации ключевой пары.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.PKCS11Constants.CKM_GOSTR3410_KEY_PAIR_GEN_EX">
            <summary>
            Механизм для генерации ключевой пары согласно стандарту ГОСТ Р 34.10-2001.
            (From Etoken documentation, см. п.5.2. Параметры цифровой подписи).
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.PKCS11Constants.CKM_GOSTR3410_WITH_GOSTR3411">
            <summary>
            Механизм для генерации и проверки ЭЦП с хэшированием подаваемых на вход данных.
            Размер входных данных не ограничен.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.PKCS11Constants.CKM_GOSTR3410_DERIVE">
            <summary>
            Механизм для выработки ключа согласования.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.PKCS11Constants.CKM_GOSTR3411">
            <summary>
            Механизм вычисления хэш-функции.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.PKCS11Constants.CKM_GOST28147">
            <summary>
            Механизм шифрования данных.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.PKCS11Constants.CKM_GOST28147_ECB">
            <summary>
            Механизм шифрования данных с использованием метода простой замены.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.PKCS11Constants.CKM_GOST28147_KEY_WRAP">
            <summary>
            Механизм экспорта и импорта открытых ключей.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.PKCS11Constants.CKM_GOST28147_KEY_GEN">
            <summary>
            Механизм выработки симметричных ключей.
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.PKCS11Constants.SC_PARAMSET_GOSTR3410_A">
            <summary>
            Parameters for elleptic curves (according to RFC 4357, paragraph 10.8)
            
            Параметры эллиптических кривых (по RFC 4357, п.10.8)
            </summary>
        </member>
        <member name="T:Net.Sf.Pkcs11.Wrapper.Pkcs11Module">
            <summary>
            Wrapper around Pkcs11 (low-level).
            </summary>
        </member>
        <member name="F:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.hLib">
            <summary>
            
            </summary>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.#ctor(System.IntPtr)">
            <summary>
            Constructor.
            </summary>
            <param name="hLib"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.GetInstance(System.String)">
            <summary>
            Creates an instance of Pkcs11Module
            </summary>
            <param name="moduleName">
            module to be loaded. it is the path of pkcs11 driver
            <example>
            <code>
            Pkcs11Module pm=Pkcs11Module.GetInstance("gclib.dll");
            </code>
            </example>
            </param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.Finalize_">
            <summary>
            
            </summary>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.GetInfo">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.GetSlotList(System.Boolean)">
            <summary>
            
            </summary>
            <param name="tokenPresent"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.GetSlotInfo(System.UInt64)">
            <summary>
            
            </summary>
            <param name="slotID"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.GetTokenInfo(System.UInt64)">
            <summary>
            
            </summary>
            <param name="slotID"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.WaitForSlotEvent(System.Boolean)">
            <summary>
            
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.GetMechanismList(System.UInt64)">
            <summary>
            
            </summary>
            <param name="slotId"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.GetMechanismInfo(System.UInt64,Net.Sf.Pkcs11.Wrapper.CKM)">
            <summary>
            
            </summary>
            <param name="slotId"></param>
            <param name="mechanism"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.InitToken(System.UInt64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="slotId"></param>
            <param name="pin"></param>
            <param name="label"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.InitPIN(System.UInt64,System.String)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="pin"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.SetPIN(System.UInt64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="oldPin"></param>
            <param name="newPin"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.OpenSession(System.UInt64,System.UInt64,System.Boolean)">
            <summary>
            
            </summary>
            <param name="slotId"></param>
            <param name="applicationId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.CloseSession(System.UInt64)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.CloseAllSessions(System.UInt64)">
            <summary>
            
            </summary>
            <param name="slotId"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.GetSessionInfo(System.UInt64)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.GetOperationState(System.UInt64)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.SetOperationState(System.UInt64,System.Byte[],System.UInt64,System.UInt64)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="opState"></param>
            <param name="hEncryptionKey"></param>
            <param name="hAuthenticationKey"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.Login(System.UInt64,Net.Sf.Pkcs11.Wrapper.CKU,System.String)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="userType"></param>
            <param name="pin"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.Logout(System.UInt64)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.CreateObject(System.UInt64,Net.Sf.Pkcs11.Wrapper.CK_ATTRIBUTE[])">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.DestroyObject(System.UInt64,System.UInt64)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="hObj"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.GetObjectSize(System.UInt64,System.UInt64)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="hObj"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.GetAttributeValue(System.UInt64,System.UInt64,Net.Sf.Pkcs11.Wrapper.CK_ATTRIBUTE[])">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="hObj"></param>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.SetAttributeValue(System.UInt64,System.UInt64,Net.Sf.Pkcs11.Wrapper.CK_ATTRIBUTE[])">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="hObj"></param>
            <param name="pTemplate"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.FindObjectsInit(System.UInt64,Net.Sf.Pkcs11.Wrapper.CK_ATTRIBUTE[])">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="pTemplate"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.FindObjects(System.UInt64,System.UInt64)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="maxCount"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.FindObjectsFinal(System.UInt64)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.EncryptInit(System.UInt64,Net.Sf.Pkcs11.Wrapper.CK_MECHANISM,System.UInt64)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="pMechanism"></param>
            <param name="hKey"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.Encrypt(System.UInt64,System.Byte[])">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="pData"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.EncryptUpdate(System.UInt64,System.Byte[])">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="pPart"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.EncryptFinal(System.UInt64)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.DecryptInit(System.UInt64,Net.Sf.Pkcs11.Wrapper.CK_MECHANISM,System.UInt64)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="pMechanism"></param>
            <param name="hKey"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.Decrypt(System.UInt64,System.Byte[])">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="pEncryptedData"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.DecryptUpdate(System.UInt64,System.Byte[])">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="pEncryptedPart"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.DecryptFinal(System.UInt64)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.DigestInit(System.UInt64,Net.Sf.Pkcs11.Wrapper.CK_MECHANISM)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="pMechanism"></param>
            <param name="hKey"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.Digest(System.UInt64,System.Byte[])">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="pData"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.DigestKey(System.UInt64,System.UInt64)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="hKey"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.DigestFinal(System.UInt64)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.SignInit(System.UInt64,Net.Sf.Pkcs11.Wrapper.CK_MECHANISM,System.UInt64)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="pMechanism"></param>
            <param name="hKey"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.Sign(System.UInt64,System.Byte[])">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="pData"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.SignUpdate(System.UInt64,System.Byte[])">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="pPart"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.SignFinal(System.UInt64)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <returns></returns>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.VerifyInit(System.UInt64,Net.Sf.Pkcs11.Wrapper.CK_MECHANISM,System.UInt64)">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="pMechanism"></param>
            <param name="hKey"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.Verify(System.UInt64,System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <param name="pData"></param>
            <param name="signature"></param>
        </member>
        <member name="M:Net.Sf.Pkcs11.Wrapper.Pkcs11Module.VerifyFinal(System.UInt64,System.Byte[])">
            <summary>
            
            </summary>
            <param name="hSession"></param>
            <returns></returns>
        </member>
    </members>
</doc>
